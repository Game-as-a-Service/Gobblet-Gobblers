@page "/"
@inject HttpClient Http
@inject IConfiguration Configuration
@using System.Net;
@using System.Text.Json;
@using Gaas.GobbletGobblers.Application.UseCases;
@using Gaas.GobbletGobblers.Application;
@using Gaas.GobbletGobblers.Domain;
@using Microsoft.AspNetCore.SignalR.Client

<!DOCTYPE html>
<html>
<head>
    <title>Gobblet Gobblers</title>
    <link rel="stylesheet" type="text/css" href="style.css">
</head>
<body>
    <input id="name" @bind-value="name" disabled="@isDisabled"></input>
    <button @onclick="CrateGame" disabled="@isDisabled">Create</button>
    <input id="gameId" @bind-value="gameId" disabled="@isDisabled"></input>
    <button @onclick="JoinGame" disabled="@isDisabled">Join</button>
    <div class="board">
        @foreach (var row in Enumerable.Range(0, boardSize)) 
        {
            <div class="row">
                @foreach (var col in Enumerable.Range(0, boardSize))
                {
                    <div class="cell" @onclick="@((e) => PutCock(col, row))">
                        @if (board != null && board[boardSize * row + col].Any())
                        {
                            @foreach (var cock in board[boardSize * row + col])
                            {
                                var size = "small";
                                switch (cock.Size.Number)
                                {
                                    case -1:
                                        size = "small";
                                        break;
                                    case 0:
                                        size = "medium";
                                        break;
                                    case 1:
                                        size = "large";
                                        break;
                                }
                                <div class="piece @($"{size}-{cock.Color}") @(moveClick[boardSize * row + col] ? "onClick" : string.Empty)"></div>
                            }
                        }
                    </div>
                }                  
            </div>
        }
    </div>

    <div class="cock">
        <div class="row">
            @if (playerViewModel != null) 
            {
                @foreach (var item in playerViewModel.Cocks.Select((c, i) => (c, i)))
                {
                    var cock = item.c;
                    var color = cock.Color.ToString();
                    var size = "small";
                    switch (cock.Size.Number)
                    {
                        case -1:
                            size = "small";
                            break;
                        case 0:
                            size = "medium";
                            break;
                        case 1:
                            size = "large";
                            break;
                    }

                    <div class="cell">
                        <div class="@(cock.IsClick ? "onClick" : string.Empty) piece @($"{size}-{color}")" @onclick="@((e) => ChangeCock(cock, item.i))"></div>
                    </div>
                }
            }
        </div>

        <div class="form-group">
            <label>
                Message:
                <input @bind="messageInput" size="50" />
            </label>
        </div>
        <button @onclick="Send" disabled="@(!IsConnected)">Send</button>

        @if (winnerId.HasValue)
        {
            <div>
               勝利者: @winnerName
            </div>
        }

        <ul id="messagesList">
            @foreach (var message in messages)
            {
                <li>@message</li>
            }
        </ul>

        @if (errorResult != null)
        {
            <div>@errorResult.Message</div>
        }       
    </div>
</body>
</html>

<style>
    .board {
        display: flex;
        flex-direction: column;
        width: 400px;
    }

    .row {
        display: flex;
    }

    .cell {
        width: 100px;
        height: 100px;
        border: 1px solid black;
        position: relative;
    }

    .piece {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }

    .small-Orange {
        width: 40px;
        height: 40px;
        background-color: Orange;
        border-radius: 50%;
        border: 1px solid white;
        z-index: 2;
    }

    .medium-Orange {
        width: 60px;
        height: 60px;
        background-color: Orange;
        border-radius: 50%;
        border: 1px solid white;
        z-index: 1;
    }

    .large-Orange {
        width: 80px;
        height: 80px;
        background-color: Orange;
        border-radius: 50%;
        border: 1px solid white;
        z-index: 0;
    }

    .small-Blue {
        width: 40px;
        height: 40px;
        background-color: blue;
        border-radius: 50%;
        border: 1px solid white;
        z-index: 2;
    }

    .medium-Blue {
        width: 60px;
        height: 60px;
        background-color: blue;
        border-radius: 50%;
        border: 1px solid white;
        z-index: 1;
    }

    .large-Blue {
        width: 80px;
        height: 80px;
        background-color: blue;
        border-radius: 50%;
        border: 1px solid white;
        z-index: 0;
    }

    .onClick {
        border: 4px solid red;
    }
</style>

@code {
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string messageInput;

    private Guid gameId;
    private string name = string.Empty;
    private bool isDisabled = false;
    private Guid playerId;
    private int boardSize;
    private Stack<CockViewModel>[] board;
    private PlayerViewModel? playerViewModel;
    private List<bool> moveClick = new List<bool>();
    private int? changeCockId;
    private Guid? winnerId;
    private string winnerName;

    private ErrorResult? errorResult;

    protected override async Task OnInitializedAsync()
    {
        var baseUrl = Configuration.GetValue<string>("BaseUrl");

        hubConnection = new HubConnectionBuilder()
            .WithUrl($"{baseUrl}/gameHub")
            .Build();

        hubConnection.On<SendMessageModel>("ReceiveMessage", (model) =>
        {
            var encodedMsg = $"{model.PlayerName}: {model.Message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        hubConnection.On<GameViewModel>("GameInfo", async (gameModel) =>
        {
            if (gameModel != null)
            {
                var playerModel = gameModel.Players.FirstOrDefault(p => p.Id == playerId);

                playerViewModel = playerModel;

                if (changeCockId.HasValue)
                {
                    var cock = playerViewModel.Cocks.ElementAtOrDefault(changeCockId.Value);
                    if (cock != null)
                    {
                        cock.IsClick = true;
                    }
                }

                board = gameModel.Board;
                winnerId = gameModel.WinnerId;
            }

            if (!moveClick.Any())
            {
                moveClick = Enumerable.Range(0, boardSize * boardSize).Select(x => { return false; }).ToList();
            }

            if (winnerId.HasValue)
            {
                //Console.WriteLine(winnerId.ToString());
                winnerName = gameModel.Players.FirstOrDefault(p => p.Id == winnerId).Name;

                await hubConnection.StopAsync();
            }

            await InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    public bool IsConnected => !string.IsNullOrEmpty(name) &&
        gameId != default &&
        hubConnection.State == HubConnectionState.Connected;

    protected async Task CrateGame()
    {
        var request = new CreateGameRequest
        {
            PlayerId = null,
            PlayerName = name,
        };

        var gameModel = await PostAsJsonAsync<CreateGameRequest, GameViewModel>("Game/Create", request);

        isDisabled = true;

        if (gameModel != null)
        {
            gameId = gameModel.Id;
            playerId = gameModel.Players[0].Id;
            playerViewModel = gameModel.Players[0];
            boardSize = gameModel.BoardSize;
            board = gameModel.Board;

            await hubConnection.SendAsync("JoinRoom", gameModel.Id.ToString(), name);
        }
    }

    protected async Task JoinGame()
    {
        var request = new JoinGameRequest
        {
            Id = gameId,
            PlayerId = null,
            PlayerName = name,
        };

        var gameModel = await PostAsJsonAsync<JoinGameRequest, GameViewModel>("Game/Join", request);

        isDisabled = true;

        if (gameModel != null)
        {
            gameId = gameModel.Id;
            playerId = gameModel.Players[1].Id;
            playerViewModel = gameModel.Players[1];
            boardSize = gameModel.BoardSize;
            board = gameModel.Board;

            await hubConnection.SendAsync("JoinRoom", gameModel.Id.ToString(), name);
        }

        StateHasChanged();
    }

    protected async Task PutCock(int x, int y)
    {
        if (winnerId.HasValue)
        {
            return;
        }

        if (board[x + (y * boardSize)].TryPeek(out var cockViewModel) && cockViewModel.Owner.Id == playerId)
        {
            moveClick[x + (y * boardSize)] = true;
            playerViewModel.Cocks = playerViewModel.Cocks.Select(x => { x.IsClick = false; return x; }).ToList();
            changeCockId = null;
        } 
        else
        {
            //Console.WriteLine(changeCockId.HasValue ? changeCockId.Value : "");

            if (changeCockId.HasValue)
            {
                var request = new PutCockRequest
                {
                    Id = gameId,
                    PlayerId = playerId,
                    HandCockIndex = changeCockId.Value,
                    Location = new Location(x, y),
                };

                try
                {
                    var gameModel = await PostAsJsonAsync<PutCockRequest, GameViewModel>("Game/PutCock", request);

                    if (gameModel != null)
                    {
                        board = gameModel.Board;
                    }
                }
                catch (Exception ex)
                {
                    throw;
                }
            }
        }

        StateHasChanged();
    }

    private async Task<TResponse> PostAsJsonAsync<TRequest, TResponse>(string requestUri, TRequest request)
        where TResponse : new()
    {
        errorResult = null;

        var response = await Http.PostAsJsonAsync<TRequest>(requestUri, request);

        if (response.StatusCode == HttpStatusCode.OK)
        {
            return await response.Content.ReadFromJsonAsync<TResponse>();
        }
        else
        {
            errorResult = await response.Content.ReadFromJsonAsync<ErrorResult>();

            return default;
        }
    }

    protected async Task ChangeCock(CockViewModel cock, int index)
    {
        moveClick = moveClick.Select(x => false).ToList();

        //Console.WriteLine(index);
        changeCockId = index;
        playerViewModel.Cocks.ToList().ForEach(x => { x.IsClick = false; });
        cock.IsClick = true;
        Console.WriteLine(JsonSerializer.Serialize(moveClick));

        StateHasChanged();
    }

    async Task Send() =>
        await hubConnection.SendAsync("SendMessage", gameId, name, messageInput);

    public void Dispose()
    {
        _ = hubConnection?.DisposeAsync();
    }
}